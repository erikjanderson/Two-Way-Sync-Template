<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_two_way.TWTempObject</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TWTempObject</name>
        <script><![CDATA[var TWTempObject = Class.create();
TWTempObject.prototype = {
    initialize: function(twTempObjectGr) {
		if(twTempObjectGr){
            if(typeof twTempObjectGr === "string"){
                twTempObjectGr = this._getGlideRecordWithId(twTempObjectGr);
            }
			if(twTempObjectGr + "" === "[object GlideRecord]"){
				this.setFromGr(twTempObjectGr);
			}else if(twTempObjectGr + "" === "[object Object]"){
				this.setFromModel(twTempObjectGr);
			}
		}
    },
	
	setFromGr: function(twTempObjectGr){
		this.sysId = twTempObjectGr.getUniqueValue();
		this.label = twTempObjectGr.getValue("u_label");
		this.name = twTempObjectGr.getValue("u_name");
		this.objectType = twTempObjectGr.getValue("u_type");
		this.properties = this._getProperties();
		this.childObjects = this._getChildObjects();
	},

	setFromModel: function(model){
		for(var key in model){
			this[key] = model[key];
		}
	},

	initializeNewObject: function(objectPath){
		if(!this._twObjectPathDictionary){
			this._twObjectPathDictionary = this._buildTWObjectPathDictionary();	
		}
		if(!objectPath){
			this._mainObject = this._copyObject(this._twObjectPathDictionary.objectDictionary[this.sysId]);
		}
		var targetObject = this._twObjectPathDictionary.objectDictionary[objectPath];
		if(!targetObject){
			return {}
		}
		return this._copyObject(targetObject);
	},

	setValue: function(propertyId, value, locations){
		gs.debug('Two Way Sync Template TWTempObject (setValue): propertyId: ' + propertyId + '   value: ' + value + '   locations:' + locations);
		if(!this._twObjectPathDictionary){
			this._twObjectPathDictionary = this._buildTWObjectPathDictionary();
			gs.info(JSON.stringify(this._twObjectPathDictionary));
			this._mainObject = this._copyObject(this._twObjectPathDictionary.objectDictionary[this.sysId]);

		}
		var targetPath = this._twObjectPathDictionary.propertyDictionary[propertyId];
		if(!targetPath){
			return;
		}
		var currentObj = this._mainObject;
		var objectPath = targetPath.replace(/(?:.(?!\(\.\)))+$/gm, '');
		var targetPathArray = targetPath.split('(.)');
		for(var i = 0; i < targetPathArray.length; i++){
			var currentProperty = targetPathArray[i];
			var location = null;
			if(currentProperty.endsWith('[*]')){
				currentProperty = currentProperty.replace('[*]', '');
				location = locations[0];
				locations.splice(0, 1);
				if(!currentObj[currentProperty]){
					currentObj[currentProperty] = [];
				}
				if(!currentObj[currentProperty][location]){
					currentObj[currentProperty][location] = this.initializeNewObject(objectPath);
				}
				currentObj = currentObj[currentProperty][location];
			}else if(i < targetPathArray.length - 1){
				currentObj[currentProperty] = this.initializeNewObject(objectPath);
				currentObj = currentObj[currentProperty];
			}else{
				currentObj[currentProperty] =  value;
			}
		}
	},

	getTWObject: function(){
		if(!this._mainObject){
			gs.info('Two Way Sync Template TWTempObject (getTWObject): no object has been set');
			return;
		}

		return this._mainObject;
	},

	//Internal Functions

	_getProperties: function(){
		var properties = {}
		var twTempObjectPropertyGr = new GlideRecord('x_156954_two_way_twtemp_object_property');
		twTempObjectPropertyGr.addQuery('u_twtemp_object', this.sysId);
		twTempObjectPropertyGr.query();
		while(twTempObjectPropertyGr.next()){
			var twTempObjectProperty = new TWTempObjectProperty(twTempObjectPropertyGr);
			properties[twTempObjectProperty.name] = twTempObjectProperty;
		}
		return properties;
	},

	_getChildObjects: function(){
		var childObjects = {};
		var twTempObjectGr = new GlideRecord("x_156954_two_way_twtemp_object");
		twTempObjectGr.addQuery('u_parent', this.sysId);
		twTempObjectGr.query();
		while(twTempObjectGr.next()){
			var childTWTempObject = new TWTempObject(twTempObjectGr)
			childObjects[childTWTempObject.name] = childTWTempObject;
		}
		return childObjects;
	},
	
	_getReferenceField: function(columnName, twTempObjectGr){
		var returnObj = {};
		if(columnName){
			returnObj.id = twTempObjectGr.getValue(columnName);
			returnObj.displayValue = twTempObjectGr.getDisplayValue(columnName);
		}
		return returnObj;
	},

    _getGlideRecordWithId: function(id){
        var twTempObjectGr = new GlideRecord("x_156954_two_way_twtemp_object");
        if(twTempObjectGr.get(id)){
            return twTempObjectGr;
        }
    },

	_buildTWObjectPathDictionary: function(pathDictionary, prePath){
		if(!pathDictionary){
			pathDictionary = {
				propertyDictionary: {},
				objectDictionary: {
					[this.sysId]: this._getObjectSchema()
				}
			};
			prePath = ''
		}else{
			prePath += '(.)';
		}
		for(var key in this.properties){
			var property = this.properties[key];
			pathDictionary.propertyDictionary[property.sysId] = prePath + property.name;
		}
		for(var objectName in this.childObjects){
			var childObject = this.childObjects[objectName];
			var childPath = prePath + childObject.name;
			if(childObject.objectType === 'array'){
				childPath += '[*]';
			}
			pathDictionary.objectDictionary[childPath] = childObject._getObjectSchema();
			pathDictionary = childObject._buildTWObjectPathDictionary(pathDictionary, childPath);
		}
		return pathDictionary;
	},

	_getObjectSchema: function(){
		var obj = {};
		for (var propertyName in this.properties){
			obj[propertyName] = '';
		}
		for (var childMapName in this.childObjects){
			if(this.childObjects[childMapName].objectType === 'object'){
				obj[childMapName] = {};
			}else if(this.childObjects[childMapName].objectType === 'array'){
				obj[childMapName] = [];
			}
		}
		return obj;
	},

	_copyObject: function(obj){
		var newObj = {};
		for(var key in obj){
			if(Array.isArray(obj[key])){
				newObj[key] = [];
			}else{
				newObj[key] = obj[key];
			}
			
		}
		return newObj;
	},

		
    type: 'TWTempObject'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2023-06-26 14:33:24</sys_created_on>
        <sys_id>c4005da347e3ed10acb08f22736d437a</sys_id>
        <sys_mod_count>108</sys_mod_count>
        <sys_name>TWTempObject</sys_name>
        <sys_package display_value="Two Way Sync Template" source="x_156954_two_way">a5942439475ba110acb08f22736d43bc</sys_package>
        <sys_policy/>
        <sys_scope display_value="Two Way Sync Template">a5942439475ba110acb08f22736d43bc</sys_scope>
        <sys_update_name>sys_script_include_c4005da347e3ed10acb08f22736d437a</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2023-07-07 12:55:29</sys_updated_on>
    </sys_script_include>
</record_update>
